void leftside(TreeNode* root,vector<int>&ans){
        TreeNode* temp=root->left;
     
     while(temp){
         if(temp->left || temp->right){
             ans.push_back(temp->val);
         }
        
         if(temp->left){
             temp=temp->left;
         }
         else{
             temp=temp->right;
         }
     }
 }
void rightside(TreeNode* root,vector<int>&ans){
        TreeNode* temp=root->right;
        vector<int>v; 
     while(temp){
         if(temp->left || temp->right){
             v.push_back(temp->val);
         }
         if(temp->right){
             temp=temp->right;
         }
         else{
             temp=temp->left;
         }
     }
    for(int i=v.size()-1;i>=0;--i){
        ans.push_back(v[i]);
    }
 }
void leaf(TreeNode* root,vector<int>&ans){
    if(!root -> left && !root -> right){
            ans.push_back(root->val);
            return;
         }
    if(root->left) {leaf(root->left,ans);}
    if(root->right) {leaf(root->right,ans);}
}

class Solution {
public:
    vector<int> boundaryOfBinaryTree(TreeNode* root) {
       vector<int>ans;
        if(!root){return ans;}
        if (root->left || root->right) ans.push_back(root -> val);
            leftside(root,ans);
            leaf(root,ans);
            rightside(root,ans);
             return ans;
    }
};

